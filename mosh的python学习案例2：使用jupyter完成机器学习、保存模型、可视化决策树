利用jupyter进行一个机器学习的基础案例：control+enter可以反复执行命令得到不同结果；迅速按两次tab可以选择需要的函数；tab+shift可以看到函数的使用方法和属性。
本案例中的机器学习的基本步骤：读取数据>>>分割数据集：训练集和测试集>>>按精度比例随机选取成为两种集合的元素们>>>进行训练>>>进行预测>>>进行精度对比
案例1：机器学习基本步骤
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


music_data = pd.read_csv("music.csv")
X = music_data.drop(columns = ["genre"]) #选择需要的数据集
y = music_data["genre"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.8) #使用该函数通过精度划分出训练集和测试集
modle = DecisionTreeClassifier()
modle.fit(X_train, y_train) #训练模型
predictions = modle.predict(X_test) #进行预测
accuracy = accuracy_score(y_test, predictions)
accuracy

---------------------------------------------------------------------------------

案例2：将上述模型保存为可以直接使用的模型：
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
import joblib


X = music_data.drop(columns = ["genre"]) #选择需要的数据集
y = music_data["genre"]
modle = DecisionTreeClassifier()
modle.fit(X, y) 
joblib.dump(modle, "music-recommendation.joblib") #dump表示将其储存为模型
model = joblib.load("music-recommendation.joblib") #加载模型、进行预测
predictions = model.predict([[21,1]])
predictions
--------------------------------------------------------------------
案例3：决策树的可视化
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

music_data = pd.read_csv("music.csv")
X = music_data.drop(columns = ["genre"])
y = music_data["genre"]
modle = DecisionTreeClassifier()
modle.fit(X, y) 
tree.export_graphviz(modle,out_file="music-recommendation.dot", #将其保存为dot文件类型
    feature_names = ["age", "genre"], #作为输入类别名称，按表格顺序输入
    class_names=sorted(y.unique()), #y作为输出类别包含多种类型，在结果中会出现多次，应用unique并用sort将其按顺序排列
     label = "all", #使得决策树解释更清晰
     rounded = True, #输出图表为圆角
     filled=True) #每一个决策框都有自己的颜色

